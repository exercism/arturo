#!/usr/bin/env bash

# Synopsis:
# Verify that each exercise's example/exemplar solution passes the tests.
# You can either verify all exercises or a single exercise.

# Example: verify all exercises
# bin/verify-exercises

# Example: verify single exercise
# bin/verify-exercises two-fer

set -eo pipefail

usage() {
    echo "usage: ${0##*/} [-h] [-v] [exercise-slug]"
    echo "where: -v is verbose: show test output even for passing tests"
}

die() { echo "$*" >&2; exit 1; }

required_tool() {
    command -v "${1}" >/dev/null 2>&1 ||
        die "${1} is required but not installed. Please install it and make sure it's in your PATH."
}

required_tool jq
required_tool arturo

copy_example_or_exemplar_to_solution() {
    jq -c '[.files.solution, .files.exemplar // .files.example] | transpose | map({src: .[1], dst: .[0]}) | .[]' .meta/config.json \
    | while read -r src_and_dst; do
        cp "$(jq -r '.src' <<< "${src_and_dst}")" "$(jq -r '.dst' <<< "${src_and_dst}")"
    done
}

unskip_tests() {
    while read -r test_file; do
        perl -i -pe 's/(test|it).skip/\1/g' "${test_file}"
    done < <(
        jq -r '.files.test[]' .meta/config.json
    )
}

run_tests() {
    set +e
    test_output=$(arturo tester.art 2>&1)
    result=$?
    set -e

    # unitt v3 bug workaround
    if [[ $result -eq 0 && $test_output == "Uncaught error in tests"* ]]; then
        result=1
    fi

    if [[ $result -eq 0 ]]; then
        $verbose && echo "${test_output}" && echo
        echo "All tests passed!"
        return 0
    else     
        echo "${test_output}"
        return 1
    fi
}

verify_exercise() {
    local dir
    local slug
    local tmp_dir

    dir=$(realpath "${1}")
    slug=$(basename "${dir}")
    tmp_dir=$(mktemp -d -t "exercism-verify-${slug}-XXXXX")

    echo "Verifying ${slug} exercise..."

    (
        trap 'rm -rf "$tmp_dir"' EXIT    # remove tempdir when subshell ends
        cp -r "${dir}/." "${tmp_dir}"
        cd "${tmp_dir}"

        copy_example_or_exemplar_to_solution
        unskip_tests
        run_tests
    )
}

verify_exercises() {
    local exercise_slug

    exercise_slug="${1}"

    shopt -s nullglob
    count=0
    for exercise_dir in ./exercises/{concept,practice}/${exercise_slug}/; do
        if [[ -d "${exercise_dir}" ]]; then
            verify_exercise "${exercise_dir}"
            ((++count))
        fi
    done
    ((count > 0)) || die 'no matching exercises found!'
}

verbose=false
while getopts :hv opt; do
    case $opt in
        h) usage; exit 0;;
        v) verbose=true ;;
        *) usage; exit 1;;
    esac
done
shift $((OPTIND - 1))

exercise_slug="${1:-*}"
verify_exercises "${exercise_slug}"
