import.version:2.0.1 {unitt}!
import {src/yacht}!

describe "Yacht" [
    it "Yacht" [
        expects.be:'equal? @[50 yacht [5 5 5 5 5] "yacht"]
    ]

    it.skip "Not Yacht" [
        expects.be:'equal? @[0 yacht [1 3 3 2 5] "yacht"]
    ]

    it.skip "Ones" [
        expects.be:'equal? @[3 yacht [1 1 1 3 5] "ones"]
    ]

    it.skip "Ones out of order" [
        expects.be:'equal? @[3 yacht [3 1 1 5 1] "ones"]
    ]

    it.skip "No ones" [
        expects.be:'equal? @[0 yacht [4 3 6 5 5] "ones"]
    ]

    it.skip "Twos" [
        expects.be:'equal? @[2 yacht [2 3 4 5 6] "twos"]
    ]

    it.skip "Yacht counted as threes" [
        expects.be:'equal? @[15 yacht [3 3 3 3 3] "threes"]
    ]

    it.skip "Fours" [
        expects.be:'equal? @[8 yacht [1 4 1 4 1] "fours"]
    ]

    it.skip "Yacht of 3s counted as fives" [
        expects.be:'equal? @[0 yacht [3 3 3 3 3] "fives"]
    ]

    it.skip "Fives" [
        expects.be:'equal? @[10 yacht [1 5 3 5 3] "fives"]
    ]

    it.skip "Sixes" [
        expects.be:'equal? @[6 yacht [2 3 4 5 6] "sixes"]
    ]

    it.skip "Four of a Kind" [
        expects.be:'equal? @[24 yacht [6 6 4 6 6] "four of a kind"]
    ]

    it.skip "Yacht can be scored as Four of a Kind" [
        expects.be:'equal? @[12 yacht [3 3 3 3 3] "four of a kind"]
    ]

    it.skip "Full house is not Four of a Kind" [
        expects.be:'equal? @[0 yacht [3 3 3 5 5] "four of a kind"]
    ]

    it.skip "Little Straight" [
        expects.be:'equal? @[30 yacht [3 5 4 1 2] "little straight"]
    ]

    it.skip "Little Straight as Big Straight" [
        expects.be:'equal? @[0 yacht [1 2 3 4 5] "big straight"]
    ]

    it.skip "Four in order but not a little straight" [
        expects.be:'equal? @[0 yacht [1 1 2 3 4] "little straight"]
    ]

    it.skip "No pairs but not a little straight" [
        expects.be:'equal? @[0 yacht [1 2 3 4 6] "little straight"]
    ]

    it.skip "Minimum is 1 maximum is 5 but not a little straight" [
        expects.be:'equal? @[0 yacht [1 1 3 4 5] "little straight"]
    ]

    it.skip "Big Straight" [
        expects.be:'equal? @[30 yacht [4 6 2 5 3] "big straight"]
    ]

    it.skip "Big Straight as little straight" [
        expects.be:'equal? @[0 yacht [6 5 4 3 2] "little straight"]
    ]

    it.skip "No pairs but not a big straight" [
        expects.be:'equal? @[0 yacht [6 5 4 3 1] "big straight"]
    ]

    it.skip "Full house two small three big" [
        expects.be:'equal? @[16 yacht [2 2 4 4 4] "full house"]
    ]

    it.skip "Full house three small two big" [
        expects.be:'equal? @[19 yacht [5 3 3 5 3] "full house"]
    ]

    it.skip "Two pair is not a full house" [
        expects.be:'equal? @[0 yacht [2 2 4 4 5] "full house"]
    ]

    it.skip "Four of a kind is not a full house" [
        expects.be:'equal? @[0 yacht [1 4 4 4 4] "full house"]
    ]

    it.skip "Yacht is not a full house" [
        expects.be:'equal? @[0 yacht [2 2 2 2 2] "full house"]
    ]

    it.skip "Choice" [
        expects.be:'equal? @[23 yacht [3 3 5 6 6] "choice"]
    ]

    it.skip "Yacht as choice" [
        expects.be:'equal? @[10 yacht [2 2 2 2 2] "choice"]
    ]
]
