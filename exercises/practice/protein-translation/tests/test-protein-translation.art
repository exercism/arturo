import.version:3.0.0 {unitt}! 
import {src/protein-translation}!

describe "Protein Translation" [
    it "Empty RNA sequence results in no proteins" [
        expects.be:'equal? @[
            express []
            express toProteins ""
        ]
    ]

    it.skip "Methionine RNA sequence" [
        expects.be:'equal? @[
            express ["Methionine"]
            express toProteins "AUG"
        ]
    ]

    it.skip "Phenylalanine RNA sequence 1" [
        expects.be:'equal? @[
            express ["Phenylalanine"]
            express toProteins "UUU"
        ]
    ]

    it.skip "Phenylalanine RNA sequence 2" [
        expects.be:'equal? @[
            express ["Phenylalanine"]
            express toProteins "UUC"
        ]
    ]

    it.skip "Leucine RNA sequence 1" [
        expects.be:'equal? @[
            express ["Leucine"]
            express toProteins "UUA"
        ]
    ]

    it.skip "Leucine RNA sequence 2" [
        expects.be:'equal? @[
            express ["Leucine"]
            express toProteins "UUG"
        ]
    ]

    it.skip "Serine RNA sequence 1" [
        expects.be:'equal? @[
            express ["Serine"]
            express toProteins "UCU"
        ]
    ]

    it.skip "Serine RNA sequence 2" [
        expects.be:'equal? @[
            express ["Serine"]
            express toProteins "UCC"
        ]
    ]

    it.skip "Serine RNA sequence 3" [
        expects.be:'equal? @[
            express ["Serine"]
            express toProteins "UCA"
        ]
    ]

    it.skip "Serine RNA sequence 4" [
        expects.be:'equal? @[
            express ["Serine"]
            express toProteins "UCG"
        ]
    ]

    it.skip "Tyrosine RNA sequence 1" [
        expects.be:'equal? @[
            express ["Tyrosine"]
            express toProteins "UAU"
        ]
    ]

    it.skip "Tyrosine RNA sequence 2" [
        expects.be:'equal? @[
            express ["Tyrosine"]
            express toProteins "UAC"
        ]
    ]

    it.skip "Cysteine RNA sequence 1" [
        expects.be:'equal? @[
            express ["Cysteine"]
            express toProteins "UGU"
        ]
    ]

    it.skip "Cysteine RNA sequence 2" [
        expects.be:'equal? @[
            express ["Cysteine"]
            express toProteins "UGC"
        ]
    ]

    it.skip "Tryptophan RNA sequence" [
        expects.be:'equal? @[
            express ["Tryptophan"]
            express toProteins "UGG"
        ]
    ]

    it.skip "STOP codon RNA sequence 1" [
        expects.be:'equal? @[
            express []
            express toProteins "UAA"

        ]
    ]

    it.skip "STOP codon RNA sequence 2" [
        expects.be:'equal? @[
            express []
            express toProteins "UAG"
        ]
    ]

    it.skip "STOP codon RNA sequence 3" [
        expects.be:'equal? @[
            express []
            express toProteins "UGA"
        ]
    ]

    it.skip "Sequence of two protein codons translates into proteins" [
        expects.be:'equal? @[
            express ["Phenylalanine" "Phenylalanine"]
            express toProteins "UUUUUU"
        ]
    ]

    it.skip "Sequence of two different protein codons translates into proteins" [
        expects.be:'equal? @[
            express ["Leucine" "Leucine"]
            express toProteins "UUAUUG"
        ]
    ]

    it.skip "Translate RNA strand into correct protein list" [
        expects.be:'equal? @[
            express ["Methionine" "Phenylalanine" "Tryptophan"]
            express toProteins "AUGUUUUGG"
        ]
    ]

    it.skip "Translation stops if STOP codon at beginning of sequence" [
        expects.be:'equal? @[
            express []
            express toProteins "UAGUGG"

        ]
    ]

    it.skip "Translation stops if STOP codon at end of two-codon sequence" [
        expects.be:'equal? @[
            express ["Tryptophan"]
            express toProteins "UGGUAG"
        ]
    ]

    it.skip "Translation stops if STOP codon at end of three-codon sequence" [
        expects.be:'equal? @[
            express ["Methionine" "Phenylalanine"]
            express toProteins "AUGUUUUAA"
        ]
    ]

    it.skip "Translation stops if STOP codon in middle of three-codon sequence" [
        expects.be:'equal? @[
            express ["Tryptophan"]
            express toProteins "UGGUAGUGG"
        ]
    ]

    it.skip "Translation stops if STOP codon in middle of six-codon sequence" [
        expects.be:'equal? @[
            express ["Tryptophan" "Cysteine" "Tyrosine"]
            express toProteins "UGGUGUUAUUAAUGGUUU"
        ]
    ]

    it.skip "Sequence of two non-STOP codons does not translate to a STOP codon" [
        expects.be:'equal? @[
            express ["Methionine" "Methionine"]
            express toProteins "AUGAUG"
        ]
    ]

    it.skip "Non-existing codon can't translate" [
        expects.be:'null? @[toProteins "AAA"]
    ]

    it.skip "Unknown amino acids, not part of a codon, can't translate" [
        expects.be:'null? @[toProteins "XYZ"]
    ]

    it.skip "Incomplete RNA sequence can't translate" [
        expects.be:'null? @[toProteins "AUGU"]
    ]

    it.skip "Incomplete RNA sequence can translate if valid until a STOP codon" [
        expects.be:'equal? @[
            express ["Phenylalanine" "Phenylalanine"]
            express toProteins "UUCUUCUAAUGGU"
        ]
    ]
]
